************************************************************************************1.1*****************************************************************************************************************

CREATE TABLE friends (
  id INTEGER,
  name TEXT,
  birthday DATE
);
insert into friends (id, name, birthday)
VALUES (1, 'ororo munroe', '1940-05-30');
SELECT * friends 
FROM friends;
INSERT into friends (id,name, birthday)
VALUES (2, 'ana chan', '1994-04-24');
insert into friends (id, name, birthday)
values (3, 'anson chan', '2001-06-16');
UPDATE friends
set name = storm
where id = 1;
alter table friends
add column email TEXT;
update friends
set email = 'storm@codeacdemy.com'
where id = 1;
update friends
set email = 'anachan123132.com'
where id = 2;
update friends
set email = 'ansonchan231231.com'
where id = 3;
delete from friends 
where id = 1;
select * friends
from friends;

************************************************************************************1.2*****************************************************************************************************************

CASE
WHEN review > 4.5 THEN 'Extraordinary'
when review > 4 then 'Excellent'
when review > 3 then 'Good'
when review > 2 then 'Fair'
else 'Poor'
END as 'Review'
From nomnom;

************************************************************************************1.3*****************************************************************************************************************

select strftime('%H', timestamp) As 'hour',
round(avg(score), 1)
 as 'average score',
 count(*) as 'Number of stories'
from hacker_news
WHERE timestamp is not null
group by 1
order by 1;

************************************************************************************1.4*****************************************************************************************************************

-- 1. Examine the tables and column names
SELECT * FROM trips;
SELECT * FROM riders;
SELECT * FROM cars;

-- 2. Find the primary keys
-- Primary key of trips
SELECT CONSTRAINT_NAME, COLUMN_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE TABLE_NAME = 'trips';

-- Primary key of riders
SELECT CONSTRAINT_NAME, COLUMN_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE TABLE_NAME = 'riders';

-- Primary key of cars
SELECT CONSTRAINT_NAME, COLUMN_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE TABLE_NAME = 'cars';

-- 3. Simple cross join between riders and cars
SELECT *
FROM riders
CROSS JOIN cars;

-- 4. Create a Trip Log by joining trips and riders
SELECT *
FROM trips
LEFT JOIN riders ON trips.rider_id = riders.rider_id;

-- 5. Link trips and cars using an INNER JOIN
SELECT *
FROM trips
INNER JOIN cars ON trips.car_id = cars.car_id;

-- 6. Stack the riders table on top of riders2
SELECT * FROM riders
UNION ALL
SELECT * FROM riders2;

-- Bonus: Queries and Aggregates

-- 7. Average cost for a trip
SELECT AVG(cost) AS average_cost
FROM trips;

-- 8. Riders who have used Lyft less than 500 times
SELECT *
FROM riders
WHERE trips_taken < 500;

-- 9. Number of active cars
SELECT COUNT(*) AS active_cars
FROM cars
WHERE status = 'active';

-- 10. Two cars with the highest trips_completed
SELECT *
FROM cars
ORDER BY trips_completed DESC
LIMIT 2;

***********************************************************************2.0*********************************************************************************


CREATE TABLE friends(
  id INTEGER,
  name TEXT,
  birthday DATE
);
INSERT INTO friends (id, name, birthday)
VALUES (1,'Ororo Munroe', '1940-05-30');

INSERT INTO friends (id, name, birthday)
VALUES (2, 'ana', '1994-05-33');

INSERT INTO friends (id, name, birthday)
VALUES (3, 'BFF2', '1990-05-33');

UPDATE friends
SET name = 'Storm'
WHERE id = 1;

ALTER TABLE friends
ADD COLUMN Email TEXT;

UPDATE friends
SET Email = 'storm@codecademy.com'
WHERE id = 1;

DETELE FROM friends
Where id = 1;

select *
From friends;
